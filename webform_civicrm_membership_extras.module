<?php

/**
 * Implements hook_webform_submission_insert.
 *
 * Creates the payment plan Remaining upfront contributions
 * if the webform is configured to create a payment plan.
 *
 * @param $node
 * @param $submission
 */
function webform_civicrm_membership_extras_webform_submission_insert($node, $submission) {
  if (!_membershipextras_isCivicrmWebform($node)) {
    return;
  }

  $contributionRecurId = _membershipextras_getPaymentPlanRecurContribution($node);

  if (!empty($contributionRecurId)) {
    civicrm_initialize();

    CRM_MembershipExtras_WebformAPI_RecurringContributionLineItemCreator::create($contributionRecurId);
    module_invoke_all('webformmembershipextras_preCreatingUpfrontContributions', $node, $contributionRecurId);
    CRM_MembershipExtras_WebformAPI_UpfrontContributionsCreator::create($contributionRecurId);
    CRM_MembershipExtras_WebformAPI_PaymentPlanActivation::activateOnlyLast($contributionRecurId);
    CRM_MembershipExtras_WebformAPI_PaymentPlanNextContributionDateUpdater::update($contributionRecurId);
  }

  $discountCodeDetails = _membershipextras_getSubmittedDiscountCodeDetails($node, $submission);
  if ($discountCodeDetails) {
    _membershipextras_updateDiscountCodeUsage($discountCodeDetails, $node);
  }
}

/**
 * Implements hook_civicrm_apiWrappers().
 *
 * @param $wrappers
 * @param $apiRequest
 */
function webform_civicrm_membership_extras_civicrm_apiWrappers(&$wrappers, $apiRequest) {
  // prevent executing this for API v4 calls
  if (is_object($apiRequest)) {
    return;
  }

  // Add custom civicrm api wrapper to alter line item price
  $wrappers[] = new wf_me_discount_civicrm_apiwrapper();
}


/**
 * Implements hook_form_alter().
 */
function webform_civicrm_membership_extras_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'wf_crm_configure_form') {
    wf_me_wf_crm_configure_form_alter_handler($form, $form_state, $form_id);
  }

  if (strpos($form_id, 'webform_client_form_') !== FALSE) {
    wf_me_webform_client_form_alter_handler($form, $form_state, $form_id);
  }
}

/**
 * The function that alters the `wf_crm_configure_form` admin form.
 *
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 */
function wf_me_wf_crm_configure_form_alter_handler(&$form, &$form_state, $form_id) {
  if (!isset($form['contribution'])) {
    return;
  }

  $wf_me_cividiscount_helper = new wf_me_cividiscount_ext_helper();
  if (!$wf_me_cividiscount_helper->isEnabled()) {
    return;
  }

  $wf_me_discount_settings = new wf_me_discount_settings();
  $nid = $form_state['storage']['nid'];
  $discount_status = $wf_me_discount_settings->getDiscountStatus($nid);

  $form['contribution']['wcm_enable_discount'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Discounts'),
    '#default_value' => $discount_status ,
    '#description' => 'When adding this field to the webform, please make sure it is also added to the CiviCRM contribution page'
  );
  $form['#submit'][] = '_webform_civicrm_discount_settings_submit';
}

/**
 * The function that alters the `webform_client_form_WEBFORMID`  form.
 *
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 */
function wf_me_webform_client_form_alter_handler(&$form, &$form_state, $form_id) {
  $wf_me_cividiscount_helper = new wf_me_cividiscount_ext_helper();
  $wf_me_discount_settings = new wf_me_discount_settings();
  $is_discount_enabled = $wf_me_discount_settings->getDiscountStatus($form['#node']->nid);
  //Hide the apply discount field on webform if enable discount is disabled or cividiscount
  //extension is disabled.
  if (!$wf_me_cividiscount_helper->isEnabled() || !$is_discount_enabled) {
    $form['submitted']['webform_discount_code_field']['#access'] = FALSE;
  }
  elseif (isset($form['submitted']['webform_discount_code_field'])) {
    _set_discount_code_status_in_session(FALSE);
    $fields = $form['submitted'];
    $form['submitted']['webform_discount_code_message_wrapper'] = array(
      '#type' => 'container',
      '#weight' => $fields['webform_discount_code_field']['#weight'],
      '#prefix' => '<div id="discount-code-message-wrapper">',
      '#suffix' => '</div>',
    );
    $form['submitted']['webform_discount_code_message_wrapper']['webform_discount_code_field_markup'] = array(
      '#markup' => '',
    );
    $form['submitted']['webform_discount_code_buttons_wrapper'] = array(
      '#type' => 'container',
      '#weight' => $fields['webform_discount_code_field']['#weight'] + 1,
      '#prefix' => '<span id="discount-code-actions">',
      '#suffix' => '</span>',
    );
    $form['submitted']['webform_discount_code_buttons_wrapper']['webform_discount_code_field_clear'] = array(
      '#type' => 'submit',
      '#value' => 'Clear',
      '#submit' => array('_webform_discount_code_clear_submit_callback'),
      '#access' => FALSE,
      '#limit_validation_errors' => array(),
      '#validate' => '',
      '#ajax' => array(
        'callback' => '_webform_discount_code_clear_ajax_callback',
      ),
    );
    $form['submitted']['webform_discount_code_buttons_wrapper']['webform_discount_code_field_apply'] = array(
      '#type' => 'submit',
      '#value' => 'Apply',
      '#submit' => array('_webform_discount_code_field_submit_callback'),
      '#limit_validation_errors' => array(),
      '#validate' => '',
      '#ajax' => array(
        'callback' => '_webform_discount_code_field_ajax_callback',
      ),
    );

    if ($form_state['disable_submit']['webform_discount_code_field']) {
      _set_discount_code_status_in_session(TRUE);
      $form['submitted']['webform_discount_code_buttons_wrapper']['webform_discount_code_field_clear']['#access'] = TRUE;
    }

    //Add custom function to set discounted line items in session that runs
    //before wf_crm_validate because the total contribution is calculated and saved in wf_crm_validate.
    array_unshift($form['#validate'], '_set_discounted_membership_items_in_session');

    $form['#validate'][] = '_rebuild_form_on_validation_error';

    // if total amount is 0 (100% discount) remove wf_crm_validate which makes payment
    if (isset($form_state['total_amount']) && $form_state['total_amount'] == 0) {
      $form['submitted']['civicrm_1_contribution_1_contribution_contribution_page_id']['#suffix'] = '';
      $validate_callbacks = $form['#validate'];
      $form['#validate'] = array();
      foreach ($validate_callbacks as $vc) {
        if ($vc == 'wf_crm_validate') {
          continue;
        }
        $form['#validate'][] = $vc;
      }
    }
  }

  if ($is_discount_enabled) {
    $form['#validate'][] = '_clear_set_discount_code_related_data';
  }
}

/**
 * When there's a validation error on the webform such as
 * error in payment details, If discount has already been applied, the form is shown
 * with the apply button showing for the discount code and since the discounted items
 * has already been set in the form line items, applying the discount code again will
 * fetch the line items as if they were the original price and the discount code will
 * be re-applied to the already discounted items. The fix is to rebuild so as to discard
 * already stored discounted items on validation fail, the user can then re-apply the
 * discount based on original prices for the memberships.
 *
 * @param array $form
 * @param array $form_state
 */
function _rebuild_form_on_validation_error($form, &$form_state) {
  if (form_get_errors() && isset($form['submitted']['webform_discount_code_field'])) {
    $form_state['rebuild'] = TRUE;
  }
}


/**
 * Sets status of discount code in session.
 *
 * @param bool $status
 */
function _set_discount_code_status_in_session($status) {
  $_SESSION['discount_code_applied'] = $status;
}

/**
 * Custom function to add webform discount context to session.
 *
 * This is used in Webform_Discount_Civicrm_APIWrapper to alter line item price
 * when returning items that have already been discounted.
 *
 * @param array $form
 * @param array $form_state
 */
function _set_discounted_membership_items_in_session($form, &$form_state) {
  $membership_type_added = array();
  foreach ($form_state['line_items'] as $item) {
    if (isset($item['membership_type_id'])) {
      $membership_type_added[$item['membership_type_id']] = $item['unit_price'];
    }
  }

  $_SESSION['webform_discount_submit']['membership_types'] = $membership_type_added;
}

/**
 * Custom submit callback for discount code clear
 *
 * @param array $form
 * @param array $form_state
 */
function _webform_discount_code_clear_submit_callback($form, &$form_state) {
  unset($form_state['values']['submitted']['webform_discount_code_field']);
  unset($form_state['input']['submitted']['webform_discount_code_field']);
  $form_state['enable_submit']['webform_discount_code_field'] = 1;
  $form_state['enable_submit_discount']['webform_discount_code_field'] = 1;
  $_SESSION['discount_code_applied'] = FALSE;
  _clear_set_discount_code_related_data($form, $form_state);
  $form_state['rebuild'] = TRUE;
}

/**
 * Clears general discount code related data stored in form state and in
 * session.
 *
 * @param array $form
 * @param array $form_state
 */
function _clear_set_discount_code_related_data($form, &$form_state) {
  unset($form_state['disable_submit']['webform_discount_code_field']);
  unset($form_state['line_items']);
  unset($_SESSION['webform_discount_submit']);
}

/**
 * Ajax callback for discount code clear
 *
 * @param array $form
 * @param array $form_state
 *
 * @return array
 */
function _webform_discount_code_clear_ajax_callback($form, &$form_state) {
  // Enable submit callback once clear submit is called.
  if (isset($form_state['enable_submit_discount']['webform_discount_code_field'])) {

    $items_amount_updated = array();
    $total_amount = 0;
    foreach ($form_state['civicrm']['line_items'] as $key => $value) {
      $total_amount += $value['line_total'];
      $items_amount_updated[$value['element']] = $value['line_total'];
    }

    // Enable submit.
    $form['submitted']['webform_discount_code_field']['#access'] = TRUE;
    $form['submitted']['webform_discount_code_buttons_wrapper']['webform_discount_code_field_clear']['#access'] = FALSE;
    // Disable Status message.
    $form['submitted']['webform_discount_code_message_wrapper']['webform_discount_code_field_markup']['#markup'] =
      "<div class='discount-message' style='background-color: #ffd6cb; color: #701a00;'>Discount '".$form_state['discount_membership_result']['code']."' cleared!</div>";
    unset($form_state['enable_submit_discount']);
    unset($form['#node']->discount);
  }

  $ajax_commands = array();
  if ($form_state['total_amount'] == 0) {
    ctools_include('ajax');
    $ajax_commands[] = ctools_ajax_command_reload();
  }
  else {
    $ajax_commands = _webform_discount_ajax_update_commands($form, $items_amount_updated, $total_amount);
    $ajax_commands[] = ajax_command_invoke('#billing-payment-block', 'show');
  }

  return array('#type' => 'ajax', '#commands' => $ajax_commands);
}

/**
 * Ajax commands to be executed for when the Apply/Clear button for the
 * discount code is clicked.
 *
 * @param array $form
 * @param array $items_amount_updated
 * @param mixed $total_amount
 *
 * @return array
 */
function _webform_discount_ajax_update_commands($form, $items_amount_updated, $total_amount) {
  $ajax_commands[] = ajax_command_replace('#discount-code-message-wrapper', render($form['submitted']['webform_discount_code_message_wrapper']));
  foreach ($items_amount_updated as $selector => $amount) {
    $ajax_commands[] = ajax_command_invoke('#wf-crm-billing-items tr.'.$selector, 'attr', array(array('data-amount' => $amount)));
    $ajax_commands[] = ajax_command_html('#wf-crm-billing-items tr.'.$selector.' td:nth-child(2)', '£ '.$amount);
  }

  $ajax_commands[] = ajax_command_invoke('#wf-crm-billing-total', 'attr', array(array('data-amount' => $total_amount)));
  $ajax_commands[] = ajax_command_html('#wf-crm-billing-total td:nth-child(2)', '£ '.$total_amount);
  $ajax_commands[] = ajax_command_replace('#discount-code-actions', render($form['submitted']['webform_discount_code_buttons_wrapper']));

  return $ajax_commands;
}

/**
 * Custom submit callback for discount code apply.
 * Here the validation for the discount code takes place. If a discount code passes
 * validation, a copy of line items are made and adjusted to suit the discount applied
 * and the values stored in the form state. These values are used to modify the user
 * view on the webform to see the new adjusted values in the _webform_discount_code_field_ajax_callback
 * function.
 *
 * @param array $form
 * @param array $form_state
 */
function _webform_discount_code_field_submit_callback($form, &$form_state) {
  $form_values = &$form_state['input']['submitted'];
  if (!empty($form_values['webform_discount_code_field'])) {

    try{
      _validate_webform_discount_code($form_values['webform_discount_code_field']);
    } catch(Exception $e) {
      $form_state['discount_error_message'] = $e->getMessage();

      return;
    }
    $components = $form['#node']->webform['components'];
    $membership_type_added = array();
    foreach ($components as $key => $component) {
      // Add only membership type civicrm components.
      if (strpos($component['form_key'], '_membership_membership_type_id') !== FALSE) {
        $membership_type_added[$key] = !empty($form_state['storage']['submitted'][$key]) ? $form_state['storage']['submitted'][$key] : 0;
      }
    }

    $line_items = $form_state['civicrm']['line_items'];
    $discount_code = $form_values['webform_discount_code_field'];
    $wf_me_discount_amount_helper = new wf_me_discount_amount_helper($form_state['storage']);
    $adjusted_line_items = $wf_me_discount_amount_helper->getAdjustedLineItems($discount_code, $line_items, $membership_type_added);

    if (!empty($adjusted_line_items)) {
      $civiDiscountExtensionHelper = new wf_me_cividiscount_ext_helper();
      $discount_code_details = $civiDiscountExtensionHelper->getDiscountCodeDetails($discount_code);
      $total_amount = $adjusted_line_items['total_amount'];
      $form_state['line_items'] = $adjusted_line_items['line_items'];
      $form_state['total_amount'] = $total_amount;
      $form_state['discount_membership_result'] = $discount_code_details;
      $form_state['discount_membership_result']['total_amount'] = $total_amount;
      $form_state['discount_membership_result']['line_items'] = $form_state['line_items'];
      $form_state['disable_submit']['webform_discount_code_field'] = 1;
      $_SESSION['discount_code_applied'] = TRUE;
      $form_state['rebuild'] = TRUE;
    }
  }
  else {
    $form_state['discount_error_message'] = t('The discount code you entered is invalid.');
  }
}

/**
 * Custom Ajax callback for discount code apply.
 * The webform UI is updated here so that the user sees the updated item values after
 * applying the discount code. Appropriate error message is also displayed in case
 * the discount code is not valid
 *
 * @param array $form
 * @param array $form_state
 */
function _webform_discount_code_field_ajax_callback($form, &$form_state) {
  $ajax_commands = array();

  if (isset($form_state['disable_submit']['webform_discount_code_field'])) {
    // Hide the Apply Button from view but show the Clear button.
    $form['submitted']['webform_discount_code_buttons_wrapper']['webform_discount_code_field_apply']['#access'] = FALSE;
    $form['submitted']['webform_discount_code_buttons_wrapper']['webform_discount_code_field_clear']['#access'] = TRUE;

    // Add Status message.
    $items_amount_updated = array();
    $total_amount = 0;
    $markup = '';
    foreach ($form_state['line_items'] as $key => $value) {
      $total_amount += $value['unit_price'];
      if ($value['discount_applied']) {
        $items_amount_updated[$value['element']] = $value['unit_price'];
        $membership_types = explode(':', $value['label']);
        $discount_prefix = 'Your ' . $membership_types[0] . ' membership with original price of &pound;' .
          $value['original_amount'] . ' had a ';
        if ($form_state['discount_membership_result']['amount_type'] == wf_me_discount_amount_helper::WEBFORM_DISCOUNT_PERCENTAGE_AMOUNT) {
          $discount_message = $value['discount_code_amount'] . '% discount applied (-&pound;' . $value['discounted_amount'] . ')';
        }
        else {
          $discount_message =  '&pound;' . $value['discounted_amount'] . ' discount applied';
        }
        $markup .= "<div class='discount-message' style='background-color: #d6ffcb; color: #1a7000;'>" . $discount_prefix . $discount_message . "</div>";
      }
    }
    $form['submitted']['webform_discount_code_message_wrapper']['webform_discount_code_field_markup']['#markup'] = $markup;

    // Webform discount code status update.
    $form['#node']->discount = $form_state['discount_membership_result'];

    // Ajax commands to update relevant parts of the UI
    $ajax_commands = _webform_discount_ajax_update_commands($form, $items_amount_updated, $total_amount);
    if ($form_state['total_amount'] == 0) {
      $ajax_commands[] = ajax_command_html('#billing-payment-block', '');
    }
  }
  else if (isset($form_state['discount_error_message'])) {
    $markup = '<div class=\'discount-message\' style=\'background-color: #ffd6cb; color: #701a00;\'>' . $form_state['discount_error_message'] . '</div>';
    $form['submitted']['webform_discount_code_message_wrapper']['webform_discount_code_field_markup']['#markup'] = $markup;
    $ajax_commands[] = ajax_command_replace(
      '#discount-code-message-wrapper',
      render($form['submitted']['webform_discount_code_message_wrapper']));
  }

  return array('#type' => 'ajax', '#commands' => $ajax_commands);
}

/**
 * Validates the webform discount code.
 *
 * @param string $discount_code
 *
 * @throws \Exception
 */
function _validate_webform_discount_code($discount_code) {
  $discount_code_validator = new wf_me_discount_code_validator();
  $discount_code_validator->validate($discount_code);
}

/**
 * Submit callback for the webform discount settings
 *
 * @param array $form
 * @param array $form_state
 */
function _webform_civicrm_discount_settings_submit(&$form, &$form_state) {
  $nid = $form_state['values']['nid'];
  $enable_discount_status = $form_state['values']['wcm_enable_discount'];
  $wf_me_discount_settings = new wf_me_discount_settings();
  $wf_me_discount_settings->save($nid, $enable_discount_status);

  $node = node_load($nid);
  $civiDiscountComponent = _webform_get_webform_component_by_name($node, 'webform_discount_code_field');
  if ($enable_discount_status == TRUE && empty($civiDiscountComponent)) {
    _webform_discount_civicrm_create_discount_component($node);
  }
  elseif (empty($enable_discount_status) && !empty($civiDiscountComponent)) {
    webform_component_delete($node, $civiDiscountComponent);
  }
}


/**
 * Gets the Webform component by its name
 *
 * @param $node
 *   The webform node
 * @param $componentName
 *   The component to get name
 *
 * @return mixed|null
 */
function _webform_get_webform_component_by_name($node, $componentName) {
  foreach ($node->webform['components'] as $key => $value) {
    if ($value['form_key'] == $componentName) {
      return $value;
    }
  }

  return NULL;
}

/**
 * Create discount webform component for particular node.
 *
 * @param object $node
 *   Webform Node object.
 *
 * @return bool
 *   Status.
 */
function _webform_discount_civicrm_create_discount_component(&$node) {

  if (empty($node)) {
    return FALSE;
  }

  $weight = end($node->webform['components'])['weight'] + 1;

  // Create Discount code component.
  $component = array(
    'nid' => $node->nid,
    'pid' => 0,
    'form_key' => 'webform_discount_code_field',
    'name' => t('Apply Discount Code'),
    'type' => 'textfield',
    'value' => '',
    'weight' => !empty($weight) ? $weight : 1000,
    'extra' => array(
      'width' => 10,
    ),
  );
  $node->webform['components'][] = $component;
  $added_cid = webform_component_insert($component);
  if ($added_cid) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Determines if "CiviCRM  Processing" is enabled on
 * the Webform.
 *
 * @param $node
 *
 * @return bool
 */
function _membershipextras_isCivicrmWebform($node) {
  if (property_exists($node, 'webform_civicrm')) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Returns the details of the discount code applied on the webform.
 *
 * @param object $node
 * @param object $submission
 *
 * @return array
 */
function _membershipextras_getSubmittedDiscountCodeDetails($node, $submission) {
  $webformComponents = $node->webform['components'];
  $discountCodeFormId = '';
  foreach ($webformComponents as $key => $component) {
    if ($component['form_key'] == 'webform_discount_code_field'){
      $discountCodeFormId = $key;
      break;
    }
  }

  if ($discountCodeFormId &&
    !empty($submission->data[$discountCodeFormId][0]) &&
    !empty($_SESSION['discount_code_applied'])
  ) {
    $cividiscountExtHelper =  new wf_me_cividiscount_ext_helper();

    return $cividiscountExtHelper->getDiscountCodeDetails($submission->data[$discountCodeFormId][0]);
  }
}

/**
 * Updates the discount code usage count in cividiscount and also
 * updates the discount code tracking details.
 *
 * @param array $discountCodeDetails
 * @param object $node
 */
function _membershipextras_updateDiscountCodeUsage($discountCodeDetails, $node) {
  $lineItems = _membershipextras_getCiviWebformPostprocessorPropertyValue($node, 'line_items');
  $lineItemsMemberships = array();
  foreach ($lineItems as $key => $item) {
    if ($item['entity_table'] == 'civicrm_membership') {
      $lineItemsMemberships[$item['membership_id']] = $item;
    }
  }

  if (empty($lineItemsMemberships)) {
    return;
  }

  $membershipDetails = civicrm_api3('Membership', 'get', [
    'id' => ['IN' => array_keys($lineItemsMemberships)],
  ])['values'];

  $discountCodeMembershipTypes = $discountCodeDetails['memberships'];
  $discountCodeAppliedMemberships = [];
  foreach ($membershipDetails as $detail) {
    if(in_array($detail['membership_type_id'], $discountCodeMembershipTypes)) {
      $discountCodeAppliedMemberships[$detail['id']] = $detail;
    }
  }

  if (empty($discountCodeAppliedMemberships)) {
    return;
  }

  $cividiscountExtHelper = new wf_me_cividiscount_ext_helper();
  foreach ($discountCodeAppliedMemberships as $membershipId => $membership) {
    $cividiscountExtHelper->updateDiscountTrackingDetails(
      $membership['contact_id'],
      $lineItemsMemberships[$membershipId]['entity_id'],
      $lineItemsMemberships[$membershipId]['contribution_id'],
      $discountCodeDetails['id']
    );
  }
  $cividiscountExtHelper->updateDiscountCodeUsage($discountCodeDetails['id']);
  _set_discount_code_status_in_session(FALSE);
}

/**
 * Gets the created recur contribution ID if there
 * is any, otherwise return NULL;
 *
 * @param $node
 *
 * @return int|null
 */
function _membershipextras_getPaymentPlanRecurContribution($node) {
  $civiWebformEntityProperty = _membershipextras_getCiviWebformPostprocessorPropertyValue($node, 'ent');

  if (empty($civiWebformEntityProperty['contribution'][1]['id'])) {
    return NULL;
  }

  $contributionId = $civiWebformEntityProperty['contribution'][1]['id'];

  try {
    $contributionRecurId = civicrm_api3('Contribution', 'getvalue', [
      'return' => 'contribution_recur_id',
      'id' => $contributionId,
    ]);

    return $contributionRecurId;
  }
  catch (Exception $e) {
    return NULL;
  }
}

/**
 * Gets wf_crm_webform_postprocess class property
 * value, whither its protected or private.
 *
 * Since we don't have control over wf_crm_webform_postprocess
 * but we need some of its private/protected properties values,
 * We are using the reflection here to achieve that.
 *
 * @param $node
 * @param $propertyName
 *
 * @return mixed
 */
function _membershipextras_getCiviWebformPostprocessorPropertyValue($node, $propertyName) {
  $civiWebformPostprocessor = wf_crm_webform_postprocess::singleton($node);
  $civiWebformPostprocessorReflection = new ReflectionObject($civiWebformPostprocessor);
  $entityReflectionObject = $civiWebformPostprocessorReflection->getProperty($propertyName);
  $entityReflectionObject->setAccessible(true);
  return $entityReflectionObject->getValue($civiWebformPostprocessor);
}
